// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: itvslprotocol.proto

#ifndef PROTOBUF_INCLUDED_itvslprotocol_2eproto
#define PROTOBUF_INCLUDED_itvslprotocol_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_itvslprotocol_2eproto 

namespace protobuf_itvslprotocol_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_itvslprotocol_2eproto
namespace itvsl {
namespace protocol {
namespace v1beta1 {
class CPacket;
class CPacketDefaultTypeInternal;
extern CPacketDefaultTypeInternal _CPacket_default_instance_;
class ShapeProto;
class ShapeProtoDefaultTypeInternal;
extern ShapeProtoDefaultTypeInternal _ShapeProto_default_instance_;
class ShapeProto_Dim;
class ShapeProto_DimDefaultTypeInternal;
extern ShapeProto_DimDefaultTypeInternal _ShapeProto_Dim_default_instance_;
class VideoCodec;
class VideoCodecDefaultTypeInternal;
extern VideoCodecDefaultTypeInternal _VideoCodec_default_instance_;
class VideoFrame;
class VideoFrameDefaultTypeInternal;
extern VideoFrameDefaultTypeInternal _VideoFrame_default_instance_;
}  // namespace v1beta1
}  // namespace protocol
}  // namespace itvsl
namespace google {
namespace protobuf {
template<> ::itvsl::protocol::v1beta1::CPacket* Arena::CreateMaybeMessage<::itvsl::protocol::v1beta1::CPacket>(Arena*);
template<> ::itvsl::protocol::v1beta1::ShapeProto* Arena::CreateMaybeMessage<::itvsl::protocol::v1beta1::ShapeProto>(Arena*);
template<> ::itvsl::protocol::v1beta1::ShapeProto_Dim* Arena::CreateMaybeMessage<::itvsl::protocol::v1beta1::ShapeProto_Dim>(Arena*);
template<> ::itvsl::protocol::v1beta1::VideoCodec* Arena::CreateMaybeMessage<::itvsl::protocol::v1beta1::VideoCodec>(Arena*);
template<> ::itvsl::protocol::v1beta1::VideoFrame* Arena::CreateMaybeMessage<::itvsl::protocol::v1beta1::VideoFrame>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace itvsl {
namespace protocol {
namespace v1beta1 {

// ===================================================================

class CPacket : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:itvsl.protocol.v1beta1.CPacket) */ {
 public:
  CPacket();
  virtual ~CPacket();

  CPacket(const CPacket& from);

  inline CPacket& operator=(const CPacket& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPacket(CPacket&& from) noexcept
    : CPacket() {
    *this = ::std::move(from);
  }

  inline CPacket& operator=(CPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPacket* internal_default_instance() {
    return reinterpret_cast<const CPacket*>(
               &_CPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CPacket* other);
  friend void swap(CPacket& a, CPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPacket* New() const final {
    return CreateMaybeMessage<CPacket>(NULL);
  }

  CPacket* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CPacket>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CPacket& from);
  void MergeFrom(const CPacket& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPacket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // bytes side_data = 7;
  void clear_side_data();
  static const int kSideDataFieldNumber = 7;
  const ::std::string& side_data() const;
  void set_side_data(const ::std::string& value);
  #if LANG_CXX11
  void set_side_data(::std::string&& value);
  #endif
  void set_side_data(const char* value);
  void set_side_data(const void* value, size_t size);
  ::std::string* mutable_side_data();
  ::std::string* release_side_data();
  void set_allocated_side_data(::std::string* side_data);

  // string meta = 11;
  void clear_meta();
  static const int kMetaFieldNumber = 11;
  const ::std::string& meta() const;
  void set_meta(const ::std::string& value);
  #if LANG_CXX11
  void set_meta(::std::string&& value);
  #endif
  void set_meta(const char* value);
  void set_meta(const char* value, size_t size);
  ::std::string* mutable_meta();
  ::std::string* release_meta();
  void set_allocated_meta(::std::string* meta);

  // bytes raw_bgr24 = 12;
  void clear_raw_bgr24();
  static const int kRawBgr24FieldNumber = 12;
  const ::std::string& raw_bgr24() const;
  void set_raw_bgr24(const ::std::string& value);
  #if LANG_CXX11
  void set_raw_bgr24(::std::string&& value);
  #endif
  void set_raw_bgr24(const char* value);
  void set_raw_bgr24(const void* value, size_t size);
  ::std::string* mutable_raw_bgr24();
  ::std::string* release_raw_bgr24();
  void set_allocated_raw_bgr24(::std::string* raw_bgr24);

  // int64 pts = 1;
  void clear_pts();
  static const int kPtsFieldNumber = 1;
  ::google::protobuf::int64 pts() const;
  void set_pts(::google::protobuf::int64 value);

  // int64 dts = 2;
  void clear_dts();
  static const int kDtsFieldNumber = 2;
  ::google::protobuf::int64 dts() const;
  void set_dts(::google::protobuf::int64 value);

  // int32 size = 4;
  void clear_size();
  static const int kSizeFieldNumber = 4;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // int32 stream_id = 5;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 5;
  ::google::protobuf::int32 stream_id() const;
  void set_stream_id(::google::protobuf::int32 value);

  // int32 flags = 6;
  void clear_flags();
  static const int kFlagsFieldNumber = 6;
  ::google::protobuf::int32 flags() const;
  void set_flags(::google::protobuf::int32 value);

  // int32 side_data_elems = 8;
  void clear_side_data_elems();
  static const int kSideDataElemsFieldNumber = 8;
  ::google::protobuf::int32 side_data_elems() const;
  void set_side_data_elems(::google::protobuf::int32 value);

  // int64 duration = 9;
  void clear_duration();
  static const int kDurationFieldNumber = 9;
  ::google::protobuf::int64 duration() const;
  void set_duration(::google::protobuf::int64 value);

  // int64 pos = 10;
  void clear_pos();
  static const int kPosFieldNumber = 10;
  ::google::protobuf::int64 pos() const;
  void set_pos(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:itvsl.protocol.v1beta1.CPacket)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr side_data_;
  ::google::protobuf::internal::ArenaStringPtr meta_;
  ::google::protobuf::internal::ArenaStringPtr raw_bgr24_;
  ::google::protobuf::int64 pts_;
  ::google::protobuf::int64 dts_;
  ::google::protobuf::int32 size_;
  ::google::protobuf::int32 stream_id_;
  ::google::protobuf::int32 flags_;
  ::google::protobuf::int32 side_data_elems_;
  ::google::protobuf::int64 duration_;
  ::google::protobuf::int64 pos_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_itvslprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShapeProto_Dim : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:itvsl.protocol.v1beta1.ShapeProto.Dim) */ {
 public:
  ShapeProto_Dim();
  virtual ~ShapeProto_Dim();

  ShapeProto_Dim(const ShapeProto_Dim& from);

  inline ShapeProto_Dim& operator=(const ShapeProto_Dim& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShapeProto_Dim(ShapeProto_Dim&& from) noexcept
    : ShapeProto_Dim() {
    *this = ::std::move(from);
  }

  inline ShapeProto_Dim& operator=(ShapeProto_Dim&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShapeProto_Dim& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShapeProto_Dim* internal_default_instance() {
    return reinterpret_cast<const ShapeProto_Dim*>(
               &_ShapeProto_Dim_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ShapeProto_Dim* other);
  friend void swap(ShapeProto_Dim& a, ShapeProto_Dim& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShapeProto_Dim* New() const final {
    return CreateMaybeMessage<ShapeProto_Dim>(NULL);
  }

  ShapeProto_Dim* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShapeProto_Dim>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShapeProto_Dim& from);
  void MergeFrom(const ShapeProto_Dim& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShapeProto_Dim* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int64 size = 1;
  void clear_size();
  static const int kSizeFieldNumber = 1;
  ::google::protobuf::int64 size() const;
  void set_size(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:itvsl.protocol.v1beta1.ShapeProto.Dim)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int64 size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_itvslprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShapeProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:itvsl.protocol.v1beta1.ShapeProto) */ {
 public:
  ShapeProto();
  virtual ~ShapeProto();

  ShapeProto(const ShapeProto& from);

  inline ShapeProto& operator=(const ShapeProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShapeProto(ShapeProto&& from) noexcept
    : ShapeProto() {
    *this = ::std::move(from);
  }

  inline ShapeProto& operator=(ShapeProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShapeProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShapeProto* internal_default_instance() {
    return reinterpret_cast<const ShapeProto*>(
               &_ShapeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ShapeProto* other);
  friend void swap(ShapeProto& a, ShapeProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShapeProto* New() const final {
    return CreateMaybeMessage<ShapeProto>(NULL);
  }

  ShapeProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShapeProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShapeProto& from);
  void MergeFrom(const ShapeProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShapeProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ShapeProto_Dim Dim;

  // accessors -------------------------------------------------------

  // repeated .itvsl.protocol.v1beta1.ShapeProto.Dim dim = 2;
  int dim_size() const;
  void clear_dim();
  static const int kDimFieldNumber = 2;
  ::itvsl::protocol::v1beta1::ShapeProto_Dim* mutable_dim(int index);
  ::google::protobuf::RepeatedPtrField< ::itvsl::protocol::v1beta1::ShapeProto_Dim >*
      mutable_dim();
  const ::itvsl::protocol::v1beta1::ShapeProto_Dim& dim(int index) const;
  ::itvsl::protocol::v1beta1::ShapeProto_Dim* add_dim();
  const ::google::protobuf::RepeatedPtrField< ::itvsl::protocol::v1beta1::ShapeProto_Dim >&
      dim() const;

  // @@protoc_insertion_point(class_scope:itvsl.protocol.v1beta1.ShapeProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::itvsl::protocol::v1beta1::ShapeProto_Dim > dim_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_itvslprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VideoFrame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:itvsl.protocol.v1beta1.VideoFrame) */ {
 public:
  VideoFrame();
  virtual ~VideoFrame();

  VideoFrame(const VideoFrame& from);

  inline VideoFrame& operator=(const VideoFrame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VideoFrame(VideoFrame&& from) noexcept
    : VideoFrame() {
    *this = ::std::move(from);
  }

  inline VideoFrame& operator=(VideoFrame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoFrame* internal_default_instance() {
    return reinterpret_cast<const VideoFrame*>(
               &_VideoFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(VideoFrame* other);
  friend void swap(VideoFrame& a, VideoFrame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VideoFrame* New() const final {
    return CreateMaybeMessage<VideoFrame>(NULL);
  }

  VideoFrame* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VideoFrame>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VideoFrame& from);
  void MergeFrom(const VideoFrame& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoFrame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // string frame_type = 8;
  void clear_frame_type();
  static const int kFrameTypeFieldNumber = 8;
  const ::std::string& frame_type() const;
  void set_frame_type(const ::std::string& value);
  #if LANG_CXX11
  void set_frame_type(::std::string&& value);
  #endif
  void set_frame_type(const char* value);
  void set_frame_type(const char* value, size_t size);
  ::std::string* mutable_frame_type();
  ::std::string* release_frame_type();
  void set_allocated_frame_type(::std::string* frame_type);

  // string device_id = 12;
  void clear_device_id();
  static const int kDeviceIdFieldNumber = 12;
  const ::std::string& device_id() const;
  void set_device_id(const ::std::string& value);
  #if LANG_CXX11
  void set_device_id(::std::string&& value);
  #endif
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  ::std::string* mutable_device_id();
  ::std::string* release_device_id();
  void set_allocated_device_id(::std::string* device_id);

  // bytes extradata = 15;
  void clear_extradata();
  static const int kExtradataFieldNumber = 15;
  const ::std::string& extradata() const;
  void set_extradata(const ::std::string& value);
  #if LANG_CXX11
  void set_extradata(::std::string&& value);
  #endif
  void set_extradata(const char* value);
  void set_extradata(const void* value, size_t size);
  ::std::string* mutable_extradata();
  ::std::string* release_extradata();
  void set_allocated_extradata(::std::string* extradata);

  // string codec_name = 16;
  void clear_codec_name();
  static const int kCodecNameFieldNumber = 16;
  const ::std::string& codec_name() const;
  void set_codec_name(const ::std::string& value);
  #if LANG_CXX11
  void set_codec_name(::std::string&& value);
  #endif
  void set_codec_name(const char* value);
  void set_codec_name(const char* value, size_t size);
  ::std::string* mutable_codec_name();
  ::std::string* release_codec_name();
  void set_allocated_codec_name(::std::string* codec_name);

  // string pix_fmt = 17;
  void clear_pix_fmt();
  static const int kPixFmtFieldNumber = 17;
  const ::std::string& pix_fmt() const;
  void set_pix_fmt(const ::std::string& value);
  #if LANG_CXX11
  void set_pix_fmt(::std::string&& value);
  #endif
  void set_pix_fmt(const char* value);
  void set_pix_fmt(const char* value, size_t size);
  ::std::string* mutable_pix_fmt();
  ::std::string* release_pix_fmt();
  void set_allocated_pix_fmt(::std::string* pix_fmt);

  // .itvsl.protocol.v1beta1.ShapeProto shape = 11;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 11;
  private:
  const ::itvsl::protocol::v1beta1::ShapeProto& _internal_shape() const;
  public:
  const ::itvsl::protocol::v1beta1::ShapeProto& shape() const;
  ::itvsl::protocol::v1beta1::ShapeProto* release_shape();
  ::itvsl::protocol::v1beta1::ShapeProto* mutable_shape();
  void set_allocated_shape(::itvsl::protocol::v1beta1::ShapeProto* shape);

  // int64 width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::google::protobuf::int64 width() const;
  void set_width(::google::protobuf::int64 value);

  // int64 height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::int64 height() const;
  void set_height(::google::protobuf::int64 value);

  // int64 timestamp = 4;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // int64 pts = 6;
  void clear_pts();
  static const int kPtsFieldNumber = 6;
  ::google::protobuf::int64 pts() const;
  void set_pts(::google::protobuf::int64 value);

  // int64 dts = 7;
  void clear_dts();
  static const int kDtsFieldNumber = 7;
  ::google::protobuf::int64 dts() const;
  void set_dts(::google::protobuf::int64 value);

  // double time_base = 10;
  void clear_time_base();
  static const int kTimeBaseFieldNumber = 10;
  double time_base() const;
  void set_time_base(double value);

  // int64 packet = 13;
  void clear_packet();
  static const int kPacketFieldNumber = 13;
  ::google::protobuf::int64 packet() const;
  void set_packet(::google::protobuf::int64 value);

  // int64 keyframe = 14;
  void clear_keyframe();
  static const int kKeyframeFieldNumber = 14;
  ::google::protobuf::int64 keyframe() const;
  void set_keyframe(::google::protobuf::int64 value);

  // bool is_keyframe = 5;
  void clear_is_keyframe();
  static const int kIsKeyframeFieldNumber = 5;
  bool is_keyframe() const;
  void set_is_keyframe(bool value);

  // bool is_corrupt = 9;
  void clear_is_corrupt();
  static const int kIsCorruptFieldNumber = 9;
  bool is_corrupt() const;
  void set_is_corrupt(bool value);

  // @@protoc_insertion_point(class_scope:itvsl.protocol.v1beta1.VideoFrame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr frame_type_;
  ::google::protobuf::internal::ArenaStringPtr device_id_;
  ::google::protobuf::internal::ArenaStringPtr extradata_;
  ::google::protobuf::internal::ArenaStringPtr codec_name_;
  ::google::protobuf::internal::ArenaStringPtr pix_fmt_;
  ::itvsl::protocol::v1beta1::ShapeProto* shape_;
  ::google::protobuf::int64 width_;
  ::google::protobuf::int64 height_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int64 pts_;
  ::google::protobuf::int64 dts_;
  double time_base_;
  ::google::protobuf::int64 packet_;
  ::google::protobuf::int64 keyframe_;
  bool is_keyframe_;
  bool is_corrupt_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_itvslprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VideoCodec : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:itvsl.protocol.v1beta1.VideoCodec) */ {
 public:
  VideoCodec();
  virtual ~VideoCodec();

  VideoCodec(const VideoCodec& from);

  inline VideoCodec& operator=(const VideoCodec& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VideoCodec(VideoCodec&& from) noexcept
    : VideoCodec() {
    *this = ::std::move(from);
  }

  inline VideoCodec& operator=(VideoCodec&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoCodec& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoCodec* internal_default_instance() {
    return reinterpret_cast<const VideoCodec*>(
               &_VideoCodec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(VideoCodec* other);
  friend void swap(VideoCodec& a, VideoCodec& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VideoCodec* New() const final {
    return CreateMaybeMessage<VideoCodec>(NULL);
  }

  VideoCodec* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VideoCodec>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VideoCodec& from);
  void MergeFrom(const VideoCodec& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoCodec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string pix_fmt = 4;
  void clear_pix_fmt();
  static const int kPixFmtFieldNumber = 4;
  const ::std::string& pix_fmt() const;
  void set_pix_fmt(const ::std::string& value);
  #if LANG_CXX11
  void set_pix_fmt(::std::string&& value);
  #endif
  void set_pix_fmt(const char* value);
  void set_pix_fmt(const char* value, size_t size);
  ::std::string* mutable_pix_fmt();
  ::std::string* release_pix_fmt();
  void set_allocated_pix_fmt(::std::string* pix_fmt);

  // bytes extradata = 5;
  void clear_extradata();
  static const int kExtradataFieldNumber = 5;
  const ::std::string& extradata() const;
  void set_extradata(const ::std::string& value);
  #if LANG_CXX11
  void set_extradata(::std::string&& value);
  #endif
  void set_extradata(const char* value);
  void set_extradata(const void* value, size_t size);
  ::std::string* mutable_extradata();
  ::std::string* release_extradata();
  void set_allocated_extradata(::std::string* extradata);

  // string long_name = 7;
  void clear_long_name();
  static const int kLongNameFieldNumber = 7;
  const ::std::string& long_name() const;
  void set_long_name(const ::std::string& value);
  #if LANG_CXX11
  void set_long_name(::std::string&& value);
  #endif
  void set_long_name(const char* value);
  void set_long_name(const char* value, size_t size);
  ::std::string* mutable_long_name();
  ::std::string* release_long_name();
  void set_allocated_long_name(::std::string* long_name);

  // int32 width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // int32 height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // int32 extradata_size = 6;
  void clear_extradata_size();
  static const int kExtradataSizeFieldNumber = 6;
  ::google::protobuf::int32 extradata_size() const;
  void set_extradata_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:itvsl.protocol.v1beta1.VideoCodec)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr pix_fmt_;
  ::google::protobuf::internal::ArenaStringPtr extradata_;
  ::google::protobuf::internal::ArenaStringPtr long_name_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 extradata_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_itvslprotocol_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CPacket

// int64 pts = 1;
inline void CPacket::clear_pts() {
  pts_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CPacket::pts() const {
  // @@protoc_insertion_point(field_get:itvsl.protocol.v1beta1.CPacket.pts)
  return pts_;
}
inline void CPacket::set_pts(::google::protobuf::int64 value) {
  
  pts_ = value;
  // @@protoc_insertion_point(field_set:itvsl.protocol.v1beta1.CPacket.pts)
}

// int64 dts = 2;
inline void CPacket::clear_dts() {
  dts_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CPacket::dts() const {
  // @@protoc_insertion_point(field_get:itvsl.protocol.v1beta1.CPacket.dts)
  return dts_;
}
inline void CPacket::set_dts(::google::protobuf::int64 value) {
  
  dts_ = value;
  // @@protoc_insertion_point(field_set:itvsl.protocol.v1beta1.CPacket.dts)
}

// bytes data = 3;
inline void CPacket::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CPacket::data() const {
  // @@protoc_insertion_point(field_get:itvsl.protocol.v1beta1.CPacket.data)
  return data_.GetNoArena();
}
inline void CPacket::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:itvsl.protocol.v1beta1.CPacket.data)
}
#if LANG_CXX11
inline void CPacket::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:itvsl.protocol.v1beta1.CPacket.data)
}
#endif
inline void CPacket::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:itvsl.protocol.v1beta1.CPacket.data)
}
inline void CPacket::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:itvsl.protocol.v1beta1.CPacket.data)
}
inline ::std::string* CPacket::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:itvsl.protocol.v1beta1.CPacket.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPacket::release_data() {
  // @@protoc_insertion_point(field_release:itvsl.protocol.v1beta1.CPacket.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPacket::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:itvsl.protocol.v1beta1.CPacket.data)
}

// int32 size = 4;
inline void CPacket::clear_size() {
  size_ = 0;
}
inline ::google::protobuf::int32 CPacket::size() const {
  // @@protoc_insertion_point(field_get:itvsl.protocol.v1beta1.CPacket.size)
  return size_;
}
inline void CPacket::set_size(::google::protobuf::int32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:itvsl.protocol.v1beta1.CPacket.size)
}

// int32 stream_id = 5;
inline void CPacket::clear_stream_id() {
  stream_id_ = 0;
}
inline ::google::protobuf::int32 CPacket::stream_id() const {
  // @@protoc_insertion_point(field_get:itvsl.protocol.v1beta1.CPacket.stream_id)
  return stream_id_;
}
inline void CPacket::set_stream_id(::google::protobuf::int32 value) {
  
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:itvsl.protocol.v1beta1.CPacket.stream_id)
}

// int32 flags = 6;
inline void CPacket::clear_flags() {
  flags_ = 0;
}
inline ::google::protobuf::int32 CPacket::flags() const {
  // @@protoc_insertion_point(field_get:itvsl.protocol.v1beta1.CPacket.flags)
  return flags_;
}
inline void CPacket::set_flags(::google::protobuf::int32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:itvsl.protocol.v1beta1.CPacket.flags)
}

// bytes side_data = 7;
inline void CPacket::clear_side_data() {
  side_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CPacket::side_data() const {
  // @@protoc_insertion_point(field_get:itvsl.protocol.v1beta1.CPacket.side_data)
  return side_data_.GetNoArena();
}
inline void CPacket::set_side_data(const ::std::string& value) {
  
  side_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:itvsl.protocol.v1beta1.CPacket.side_data)
}
#if LANG_CXX11
inline void CPacket::set_side_data(::std::string&& value) {
  
  side_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:itvsl.protocol.v1beta1.CPacket.side_data)
}
#endif
inline void CPacket::set_side_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  side_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:itvsl.protocol.v1beta1.CPacket.side_data)
}
inline void CPacket::set_side_data(const void* value, size_t size) {
  
  side_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:itvsl.protocol.v1beta1.CPacket.side_data)
}
inline ::std::string* CPacket::mutable_side_data() {
  
  // @@protoc_insertion_point(field_mutable:itvsl.protocol.v1beta1.CPacket.side_data)
  return side_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPacket::release_side_data() {
  // @@protoc_insertion_point(field_release:itvsl.protocol.v1beta1.CPacket.side_data)
  
  return side_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPacket::set_allocated_side_data(::std::string* side_data) {
  if (side_data != NULL) {
    
  } else {
    
  }
  side_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), side_data);
  // @@protoc_insertion_point(field_set_allocated:itvsl.protocol.v1beta1.CPacket.side_data)
}

// int32 side_data_elems = 8;
inline void CPacket::clear_side_data_elems() {
  side_data_elems_ = 0;
}
inline ::google::protobuf::int32 CPacket::side_data_elems() const {
  // @@protoc_insertion_point(field_get:itvsl.protocol.v1beta1.CPacket.side_data_elems)
  return side_data_elems_;
}
inline void CPacket::set_side_data_elems(::google::protobuf::int32 value) {
  
  side_data_elems_ = value;
  // @@protoc_insertion_point(field_set:itvsl.protocol.v1beta1.CPacket.side_data_elems)
}

// int64 duration = 9;
inline void CPacket::clear_duration() {
  duration_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CPacket::duration() const {
  // @@protoc_insertion_point(field_get:itvsl.protocol.v1beta1.CPacket.duration)
  return duration_;
}
inline void CPacket::set_duration(::google::protobuf::int64 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:itvsl.protocol.v1beta1.CPacket.duration)
}

// int64 pos = 10;
inline void CPacket::clear_pos() {
  pos_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CPacket::pos() const {
  // @@protoc_insertion_point(field_get:itvsl.protocol.v1beta1.CPacket.pos)
  return pos_;
}
inline void CPacket::set_pos(::google::protobuf::int64 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:itvsl.protocol.v1beta1.CPacket.pos)
}

// string meta = 11;
inline void CPacket::clear_meta() {
  meta_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CPacket::meta() const {
  // @@protoc_insertion_point(field_get:itvsl.protocol.v1beta1.CPacket.meta)
  return meta_.GetNoArena();
}
inline void CPacket::set_meta(const ::std::string& value) {
  
  meta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:itvsl.protocol.v1beta1.CPacket.meta)
}
#if LANG_CXX11
inline void CPacket::set_meta(::std::string&& value) {
  
  meta_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:itvsl.protocol.v1beta1.CPacket.meta)
}
#endif
inline void CPacket::set_meta(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  meta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:itvsl.protocol.v1beta1.CPacket.meta)
}
inline void CPacket::set_meta(const char* value, size_t size) {
  
  meta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:itvsl.protocol.v1beta1.CPacket.meta)
}
inline ::std::string* CPacket::mutable_meta() {
  
  // @@protoc_insertion_point(field_mutable:itvsl.protocol.v1beta1.CPacket.meta)
  return meta_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPacket::release_meta() {
  // @@protoc_insertion_point(field_release:itvsl.protocol.v1beta1.CPacket.meta)
  
  return meta_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPacket::set_allocated_meta(::std::string* meta) {
  if (meta != NULL) {
    
  } else {
    
  }
  meta_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), meta);
  // @@protoc_insertion_point(field_set_allocated:itvsl.protocol.v1beta1.CPacket.meta)
}

// bytes raw_bgr24 = 12;
inline void CPacket::clear_raw_bgr24() {
  raw_bgr24_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CPacket::raw_bgr24() const {
  // @@protoc_insertion_point(field_get:itvsl.protocol.v1beta1.CPacket.raw_bgr24)
  return raw_bgr24_.GetNoArena();
}
inline void CPacket::set_raw_bgr24(const ::std::string& value) {
  
  raw_bgr24_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:itvsl.protocol.v1beta1.CPacket.raw_bgr24)
}
#if LANG_CXX11
inline void CPacket::set_raw_bgr24(::std::string&& value) {
  
  raw_bgr24_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:itvsl.protocol.v1beta1.CPacket.raw_bgr24)
}
#endif
inline void CPacket::set_raw_bgr24(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  raw_bgr24_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:itvsl.protocol.v1beta1.CPacket.raw_bgr24)
}
inline void CPacket::set_raw_bgr24(const void* value, size_t size) {
  
  raw_bgr24_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:itvsl.protocol.v1beta1.CPacket.raw_bgr24)
}
inline ::std::string* CPacket::mutable_raw_bgr24() {
  
  // @@protoc_insertion_point(field_mutable:itvsl.protocol.v1beta1.CPacket.raw_bgr24)
  return raw_bgr24_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPacket::release_raw_bgr24() {
  // @@protoc_insertion_point(field_release:itvsl.protocol.v1beta1.CPacket.raw_bgr24)
  
  return raw_bgr24_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPacket::set_allocated_raw_bgr24(::std::string* raw_bgr24) {
  if (raw_bgr24 != NULL) {
    
  } else {
    
  }
  raw_bgr24_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_bgr24);
  // @@protoc_insertion_point(field_set_allocated:itvsl.protocol.v1beta1.CPacket.raw_bgr24)
}

// -------------------------------------------------------------------

// ShapeProto_Dim

// int64 size = 1;
inline void ShapeProto_Dim::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ShapeProto_Dim::size() const {
  // @@protoc_insertion_point(field_get:itvsl.protocol.v1beta1.ShapeProto.Dim.size)
  return size_;
}
inline void ShapeProto_Dim::set_size(::google::protobuf::int64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:itvsl.protocol.v1beta1.ShapeProto.Dim.size)
}

// string name = 2;
inline void ShapeProto_Dim::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ShapeProto_Dim::name() const {
  // @@protoc_insertion_point(field_get:itvsl.protocol.v1beta1.ShapeProto.Dim.name)
  return name_.GetNoArena();
}
inline void ShapeProto_Dim::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:itvsl.protocol.v1beta1.ShapeProto.Dim.name)
}
#if LANG_CXX11
inline void ShapeProto_Dim::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:itvsl.protocol.v1beta1.ShapeProto.Dim.name)
}
#endif
inline void ShapeProto_Dim::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:itvsl.protocol.v1beta1.ShapeProto.Dim.name)
}
inline void ShapeProto_Dim::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:itvsl.protocol.v1beta1.ShapeProto.Dim.name)
}
inline ::std::string* ShapeProto_Dim::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:itvsl.protocol.v1beta1.ShapeProto.Dim.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShapeProto_Dim::release_name() {
  // @@protoc_insertion_point(field_release:itvsl.protocol.v1beta1.ShapeProto.Dim.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShapeProto_Dim::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:itvsl.protocol.v1beta1.ShapeProto.Dim.name)
}

// -------------------------------------------------------------------

// ShapeProto

// repeated .itvsl.protocol.v1beta1.ShapeProto.Dim dim = 2;
inline int ShapeProto::dim_size() const {
  return dim_.size();
}
inline void ShapeProto::clear_dim() {
  dim_.Clear();
}
inline ::itvsl::protocol::v1beta1::ShapeProto_Dim* ShapeProto::mutable_dim(int index) {
  // @@protoc_insertion_point(field_mutable:itvsl.protocol.v1beta1.ShapeProto.dim)
  return dim_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::itvsl::protocol::v1beta1::ShapeProto_Dim >*
ShapeProto::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:itvsl.protocol.v1beta1.ShapeProto.dim)
  return &dim_;
}
inline const ::itvsl::protocol::v1beta1::ShapeProto_Dim& ShapeProto::dim(int index) const {
  // @@protoc_insertion_point(field_get:itvsl.protocol.v1beta1.ShapeProto.dim)
  return dim_.Get(index);
}
inline ::itvsl::protocol::v1beta1::ShapeProto_Dim* ShapeProto::add_dim() {
  // @@protoc_insertion_point(field_add:itvsl.protocol.v1beta1.ShapeProto.dim)
  return dim_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::itvsl::protocol::v1beta1::ShapeProto_Dim >&
ShapeProto::dim() const {
  // @@protoc_insertion_point(field_list:itvsl.protocol.v1beta1.ShapeProto.dim)
  return dim_;
}

// -------------------------------------------------------------------

// VideoFrame

// int64 width = 1;
inline void VideoFrame::clear_width() {
  width_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VideoFrame::width() const {
  // @@protoc_insertion_point(field_get:itvsl.protocol.v1beta1.VideoFrame.width)
  return width_;
}
inline void VideoFrame::set_width(::google::protobuf::int64 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:itvsl.protocol.v1beta1.VideoFrame.width)
}

// int64 height = 2;
inline void VideoFrame::clear_height() {
  height_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VideoFrame::height() const {
  // @@protoc_insertion_point(field_get:itvsl.protocol.v1beta1.VideoFrame.height)
  return height_;
}
inline void VideoFrame::set_height(::google::protobuf::int64 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:itvsl.protocol.v1beta1.VideoFrame.height)
}

// bytes data = 3;
inline void VideoFrame::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoFrame::data() const {
  // @@protoc_insertion_point(field_get:itvsl.protocol.v1beta1.VideoFrame.data)
  return data_.GetNoArena();
}
inline void VideoFrame::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:itvsl.protocol.v1beta1.VideoFrame.data)
}
#if LANG_CXX11
inline void VideoFrame::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:itvsl.protocol.v1beta1.VideoFrame.data)
}
#endif
inline void VideoFrame::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:itvsl.protocol.v1beta1.VideoFrame.data)
}
inline void VideoFrame::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:itvsl.protocol.v1beta1.VideoFrame.data)
}
inline ::std::string* VideoFrame::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:itvsl.protocol.v1beta1.VideoFrame.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoFrame::release_data() {
  // @@protoc_insertion_point(field_release:itvsl.protocol.v1beta1.VideoFrame.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoFrame::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:itvsl.protocol.v1beta1.VideoFrame.data)
}

// int64 timestamp = 4;
inline void VideoFrame::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VideoFrame::timestamp() const {
  // @@protoc_insertion_point(field_get:itvsl.protocol.v1beta1.VideoFrame.timestamp)
  return timestamp_;
}
inline void VideoFrame::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:itvsl.protocol.v1beta1.VideoFrame.timestamp)
}

// bool is_keyframe = 5;
inline void VideoFrame::clear_is_keyframe() {
  is_keyframe_ = false;
}
inline bool VideoFrame::is_keyframe() const {
  // @@protoc_insertion_point(field_get:itvsl.protocol.v1beta1.VideoFrame.is_keyframe)
  return is_keyframe_;
}
inline void VideoFrame::set_is_keyframe(bool value) {
  
  is_keyframe_ = value;
  // @@protoc_insertion_point(field_set:itvsl.protocol.v1beta1.VideoFrame.is_keyframe)
}

// int64 pts = 6;
inline void VideoFrame::clear_pts() {
  pts_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VideoFrame::pts() const {
  // @@protoc_insertion_point(field_get:itvsl.protocol.v1beta1.VideoFrame.pts)
  return pts_;
}
inline void VideoFrame::set_pts(::google::protobuf::int64 value) {
  
  pts_ = value;
  // @@protoc_insertion_point(field_set:itvsl.protocol.v1beta1.VideoFrame.pts)
}

// int64 dts = 7;
inline void VideoFrame::clear_dts() {
  dts_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VideoFrame::dts() const {
  // @@protoc_insertion_point(field_get:itvsl.protocol.v1beta1.VideoFrame.dts)
  return dts_;
}
inline void VideoFrame::set_dts(::google::protobuf::int64 value) {
  
  dts_ = value;
  // @@protoc_insertion_point(field_set:itvsl.protocol.v1beta1.VideoFrame.dts)
}

// string frame_type = 8;
inline void VideoFrame::clear_frame_type() {
  frame_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoFrame::frame_type() const {
  // @@protoc_insertion_point(field_get:itvsl.protocol.v1beta1.VideoFrame.frame_type)
  return frame_type_.GetNoArena();
}
inline void VideoFrame::set_frame_type(const ::std::string& value) {
  
  frame_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:itvsl.protocol.v1beta1.VideoFrame.frame_type)
}
#if LANG_CXX11
inline void VideoFrame::set_frame_type(::std::string&& value) {
  
  frame_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:itvsl.protocol.v1beta1.VideoFrame.frame_type)
}
#endif
inline void VideoFrame::set_frame_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  frame_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:itvsl.protocol.v1beta1.VideoFrame.frame_type)
}
inline void VideoFrame::set_frame_type(const char* value, size_t size) {
  
  frame_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:itvsl.protocol.v1beta1.VideoFrame.frame_type)
}
inline ::std::string* VideoFrame::mutable_frame_type() {
  
  // @@protoc_insertion_point(field_mutable:itvsl.protocol.v1beta1.VideoFrame.frame_type)
  return frame_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoFrame::release_frame_type() {
  // @@protoc_insertion_point(field_release:itvsl.protocol.v1beta1.VideoFrame.frame_type)
  
  return frame_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoFrame::set_allocated_frame_type(::std::string* frame_type) {
  if (frame_type != NULL) {
    
  } else {
    
  }
  frame_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame_type);
  // @@protoc_insertion_point(field_set_allocated:itvsl.protocol.v1beta1.VideoFrame.frame_type)
}

// bool is_corrupt = 9;
inline void VideoFrame::clear_is_corrupt() {
  is_corrupt_ = false;
}
inline bool VideoFrame::is_corrupt() const {
  // @@protoc_insertion_point(field_get:itvsl.protocol.v1beta1.VideoFrame.is_corrupt)
  return is_corrupt_;
}
inline void VideoFrame::set_is_corrupt(bool value) {
  
  is_corrupt_ = value;
  // @@protoc_insertion_point(field_set:itvsl.protocol.v1beta1.VideoFrame.is_corrupt)
}

// double time_base = 10;
inline void VideoFrame::clear_time_base() {
  time_base_ = 0;
}
inline double VideoFrame::time_base() const {
  // @@protoc_insertion_point(field_get:itvsl.protocol.v1beta1.VideoFrame.time_base)
  return time_base_;
}
inline void VideoFrame::set_time_base(double value) {
  
  time_base_ = value;
  // @@protoc_insertion_point(field_set:itvsl.protocol.v1beta1.VideoFrame.time_base)
}

// .itvsl.protocol.v1beta1.ShapeProto shape = 11;
inline bool VideoFrame::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
inline void VideoFrame::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) {
    delete shape_;
  }
  shape_ = NULL;
}
inline const ::itvsl::protocol::v1beta1::ShapeProto& VideoFrame::_internal_shape() const {
  return *shape_;
}
inline const ::itvsl::protocol::v1beta1::ShapeProto& VideoFrame::shape() const {
  const ::itvsl::protocol::v1beta1::ShapeProto* p = shape_;
  // @@protoc_insertion_point(field_get:itvsl.protocol.v1beta1.VideoFrame.shape)
  return p != NULL ? *p : *reinterpret_cast<const ::itvsl::protocol::v1beta1::ShapeProto*>(
      &::itvsl::protocol::v1beta1::_ShapeProto_default_instance_);
}
inline ::itvsl::protocol::v1beta1::ShapeProto* VideoFrame::release_shape() {
  // @@protoc_insertion_point(field_release:itvsl.protocol.v1beta1.VideoFrame.shape)
  
  ::itvsl::protocol::v1beta1::ShapeProto* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline ::itvsl::protocol::v1beta1::ShapeProto* VideoFrame::mutable_shape() {
  
  if (shape_ == NULL) {
    auto* p = CreateMaybeMessage<::itvsl::protocol::v1beta1::ShapeProto>(GetArenaNoVirtual());
    shape_ = p;
  }
  // @@protoc_insertion_point(field_mutable:itvsl.protocol.v1beta1.VideoFrame.shape)
  return shape_;
}
inline void VideoFrame::set_allocated_shape(::itvsl::protocol::v1beta1::ShapeProto* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shape_;
  }
  if (shape) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      shape = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    
  } else {
    
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:itvsl.protocol.v1beta1.VideoFrame.shape)
}

// string device_id = 12;
inline void VideoFrame::clear_device_id() {
  device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoFrame::device_id() const {
  // @@protoc_insertion_point(field_get:itvsl.protocol.v1beta1.VideoFrame.device_id)
  return device_id_.GetNoArena();
}
inline void VideoFrame::set_device_id(const ::std::string& value) {
  
  device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:itvsl.protocol.v1beta1.VideoFrame.device_id)
}
#if LANG_CXX11
inline void VideoFrame::set_device_id(::std::string&& value) {
  
  device_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:itvsl.protocol.v1beta1.VideoFrame.device_id)
}
#endif
inline void VideoFrame::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:itvsl.protocol.v1beta1.VideoFrame.device_id)
}
inline void VideoFrame::set_device_id(const char* value, size_t size) {
  
  device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:itvsl.protocol.v1beta1.VideoFrame.device_id)
}
inline ::std::string* VideoFrame::mutable_device_id() {
  
  // @@protoc_insertion_point(field_mutable:itvsl.protocol.v1beta1.VideoFrame.device_id)
  return device_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoFrame::release_device_id() {
  // @@protoc_insertion_point(field_release:itvsl.protocol.v1beta1.VideoFrame.device_id)
  
  return device_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoFrame::set_allocated_device_id(::std::string* device_id) {
  if (device_id != NULL) {
    
  } else {
    
  }
  device_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_id);
  // @@protoc_insertion_point(field_set_allocated:itvsl.protocol.v1beta1.VideoFrame.device_id)
}

// int64 packet = 13;
inline void VideoFrame::clear_packet() {
  packet_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VideoFrame::packet() const {
  // @@protoc_insertion_point(field_get:itvsl.protocol.v1beta1.VideoFrame.packet)
  return packet_;
}
inline void VideoFrame::set_packet(::google::protobuf::int64 value) {
  
  packet_ = value;
  // @@protoc_insertion_point(field_set:itvsl.protocol.v1beta1.VideoFrame.packet)
}

// int64 keyframe = 14;
inline void VideoFrame::clear_keyframe() {
  keyframe_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VideoFrame::keyframe() const {
  // @@protoc_insertion_point(field_get:itvsl.protocol.v1beta1.VideoFrame.keyframe)
  return keyframe_;
}
inline void VideoFrame::set_keyframe(::google::protobuf::int64 value) {
  
  keyframe_ = value;
  // @@protoc_insertion_point(field_set:itvsl.protocol.v1beta1.VideoFrame.keyframe)
}

// bytes extradata = 15;
inline void VideoFrame::clear_extradata() {
  extradata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoFrame::extradata() const {
  // @@protoc_insertion_point(field_get:itvsl.protocol.v1beta1.VideoFrame.extradata)
  return extradata_.GetNoArena();
}
inline void VideoFrame::set_extradata(const ::std::string& value) {
  
  extradata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:itvsl.protocol.v1beta1.VideoFrame.extradata)
}
#if LANG_CXX11
inline void VideoFrame::set_extradata(::std::string&& value) {
  
  extradata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:itvsl.protocol.v1beta1.VideoFrame.extradata)
}
#endif
inline void VideoFrame::set_extradata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extradata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:itvsl.protocol.v1beta1.VideoFrame.extradata)
}
inline void VideoFrame::set_extradata(const void* value, size_t size) {
  
  extradata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:itvsl.protocol.v1beta1.VideoFrame.extradata)
}
inline ::std::string* VideoFrame::mutable_extradata() {
  
  // @@protoc_insertion_point(field_mutable:itvsl.protocol.v1beta1.VideoFrame.extradata)
  return extradata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoFrame::release_extradata() {
  // @@protoc_insertion_point(field_release:itvsl.protocol.v1beta1.VideoFrame.extradata)
  
  return extradata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoFrame::set_allocated_extradata(::std::string* extradata) {
  if (extradata != NULL) {
    
  } else {
    
  }
  extradata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extradata);
  // @@protoc_insertion_point(field_set_allocated:itvsl.protocol.v1beta1.VideoFrame.extradata)
}

// string codec_name = 16;
inline void VideoFrame::clear_codec_name() {
  codec_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoFrame::codec_name() const {
  // @@protoc_insertion_point(field_get:itvsl.protocol.v1beta1.VideoFrame.codec_name)
  return codec_name_.GetNoArena();
}
inline void VideoFrame::set_codec_name(const ::std::string& value) {
  
  codec_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:itvsl.protocol.v1beta1.VideoFrame.codec_name)
}
#if LANG_CXX11
inline void VideoFrame::set_codec_name(::std::string&& value) {
  
  codec_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:itvsl.protocol.v1beta1.VideoFrame.codec_name)
}
#endif
inline void VideoFrame::set_codec_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  codec_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:itvsl.protocol.v1beta1.VideoFrame.codec_name)
}
inline void VideoFrame::set_codec_name(const char* value, size_t size) {
  
  codec_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:itvsl.protocol.v1beta1.VideoFrame.codec_name)
}
inline ::std::string* VideoFrame::mutable_codec_name() {
  
  // @@protoc_insertion_point(field_mutable:itvsl.protocol.v1beta1.VideoFrame.codec_name)
  return codec_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoFrame::release_codec_name() {
  // @@protoc_insertion_point(field_release:itvsl.protocol.v1beta1.VideoFrame.codec_name)
  
  return codec_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoFrame::set_allocated_codec_name(::std::string* codec_name) {
  if (codec_name != NULL) {
    
  } else {
    
  }
  codec_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), codec_name);
  // @@protoc_insertion_point(field_set_allocated:itvsl.protocol.v1beta1.VideoFrame.codec_name)
}

// string pix_fmt = 17;
inline void VideoFrame::clear_pix_fmt() {
  pix_fmt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoFrame::pix_fmt() const {
  // @@protoc_insertion_point(field_get:itvsl.protocol.v1beta1.VideoFrame.pix_fmt)
  return pix_fmt_.GetNoArena();
}
inline void VideoFrame::set_pix_fmt(const ::std::string& value) {
  
  pix_fmt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:itvsl.protocol.v1beta1.VideoFrame.pix_fmt)
}
#if LANG_CXX11
inline void VideoFrame::set_pix_fmt(::std::string&& value) {
  
  pix_fmt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:itvsl.protocol.v1beta1.VideoFrame.pix_fmt)
}
#endif
inline void VideoFrame::set_pix_fmt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pix_fmt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:itvsl.protocol.v1beta1.VideoFrame.pix_fmt)
}
inline void VideoFrame::set_pix_fmt(const char* value, size_t size) {
  
  pix_fmt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:itvsl.protocol.v1beta1.VideoFrame.pix_fmt)
}
inline ::std::string* VideoFrame::mutable_pix_fmt() {
  
  // @@protoc_insertion_point(field_mutable:itvsl.protocol.v1beta1.VideoFrame.pix_fmt)
  return pix_fmt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoFrame::release_pix_fmt() {
  // @@protoc_insertion_point(field_release:itvsl.protocol.v1beta1.VideoFrame.pix_fmt)
  
  return pix_fmt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoFrame::set_allocated_pix_fmt(::std::string* pix_fmt) {
  if (pix_fmt != NULL) {
    
  } else {
    
  }
  pix_fmt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pix_fmt);
  // @@protoc_insertion_point(field_set_allocated:itvsl.protocol.v1beta1.VideoFrame.pix_fmt)
}

// -------------------------------------------------------------------

// VideoCodec

// string name = 1;
inline void VideoCodec::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoCodec::name() const {
  // @@protoc_insertion_point(field_get:itvsl.protocol.v1beta1.VideoCodec.name)
  return name_.GetNoArena();
}
inline void VideoCodec::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:itvsl.protocol.v1beta1.VideoCodec.name)
}
#if LANG_CXX11
inline void VideoCodec::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:itvsl.protocol.v1beta1.VideoCodec.name)
}
#endif
inline void VideoCodec::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:itvsl.protocol.v1beta1.VideoCodec.name)
}
inline void VideoCodec::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:itvsl.protocol.v1beta1.VideoCodec.name)
}
inline ::std::string* VideoCodec::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:itvsl.protocol.v1beta1.VideoCodec.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoCodec::release_name() {
  // @@protoc_insertion_point(field_release:itvsl.protocol.v1beta1.VideoCodec.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoCodec::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:itvsl.protocol.v1beta1.VideoCodec.name)
}

// int32 width = 2;
inline void VideoCodec::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 VideoCodec::width() const {
  // @@protoc_insertion_point(field_get:itvsl.protocol.v1beta1.VideoCodec.width)
  return width_;
}
inline void VideoCodec::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:itvsl.protocol.v1beta1.VideoCodec.width)
}

// int32 height = 3;
inline void VideoCodec::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 VideoCodec::height() const {
  // @@protoc_insertion_point(field_get:itvsl.protocol.v1beta1.VideoCodec.height)
  return height_;
}
inline void VideoCodec::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:itvsl.protocol.v1beta1.VideoCodec.height)
}

// string pix_fmt = 4;
inline void VideoCodec::clear_pix_fmt() {
  pix_fmt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoCodec::pix_fmt() const {
  // @@protoc_insertion_point(field_get:itvsl.protocol.v1beta1.VideoCodec.pix_fmt)
  return pix_fmt_.GetNoArena();
}
inline void VideoCodec::set_pix_fmt(const ::std::string& value) {
  
  pix_fmt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:itvsl.protocol.v1beta1.VideoCodec.pix_fmt)
}
#if LANG_CXX11
inline void VideoCodec::set_pix_fmt(::std::string&& value) {
  
  pix_fmt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:itvsl.protocol.v1beta1.VideoCodec.pix_fmt)
}
#endif
inline void VideoCodec::set_pix_fmt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pix_fmt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:itvsl.protocol.v1beta1.VideoCodec.pix_fmt)
}
inline void VideoCodec::set_pix_fmt(const char* value, size_t size) {
  
  pix_fmt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:itvsl.protocol.v1beta1.VideoCodec.pix_fmt)
}
inline ::std::string* VideoCodec::mutable_pix_fmt() {
  
  // @@protoc_insertion_point(field_mutable:itvsl.protocol.v1beta1.VideoCodec.pix_fmt)
  return pix_fmt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoCodec::release_pix_fmt() {
  // @@protoc_insertion_point(field_release:itvsl.protocol.v1beta1.VideoCodec.pix_fmt)
  
  return pix_fmt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoCodec::set_allocated_pix_fmt(::std::string* pix_fmt) {
  if (pix_fmt != NULL) {
    
  } else {
    
  }
  pix_fmt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pix_fmt);
  // @@protoc_insertion_point(field_set_allocated:itvsl.protocol.v1beta1.VideoCodec.pix_fmt)
}

// bytes extradata = 5;
inline void VideoCodec::clear_extradata() {
  extradata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoCodec::extradata() const {
  // @@protoc_insertion_point(field_get:itvsl.protocol.v1beta1.VideoCodec.extradata)
  return extradata_.GetNoArena();
}
inline void VideoCodec::set_extradata(const ::std::string& value) {
  
  extradata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:itvsl.protocol.v1beta1.VideoCodec.extradata)
}
#if LANG_CXX11
inline void VideoCodec::set_extradata(::std::string&& value) {
  
  extradata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:itvsl.protocol.v1beta1.VideoCodec.extradata)
}
#endif
inline void VideoCodec::set_extradata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extradata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:itvsl.protocol.v1beta1.VideoCodec.extradata)
}
inline void VideoCodec::set_extradata(const void* value, size_t size) {
  
  extradata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:itvsl.protocol.v1beta1.VideoCodec.extradata)
}
inline ::std::string* VideoCodec::mutable_extradata() {
  
  // @@protoc_insertion_point(field_mutable:itvsl.protocol.v1beta1.VideoCodec.extradata)
  return extradata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoCodec::release_extradata() {
  // @@protoc_insertion_point(field_release:itvsl.protocol.v1beta1.VideoCodec.extradata)
  
  return extradata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoCodec::set_allocated_extradata(::std::string* extradata) {
  if (extradata != NULL) {
    
  } else {
    
  }
  extradata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extradata);
  // @@protoc_insertion_point(field_set_allocated:itvsl.protocol.v1beta1.VideoCodec.extradata)
}

// int32 extradata_size = 6;
inline void VideoCodec::clear_extradata_size() {
  extradata_size_ = 0;
}
inline ::google::protobuf::int32 VideoCodec::extradata_size() const {
  // @@protoc_insertion_point(field_get:itvsl.protocol.v1beta1.VideoCodec.extradata_size)
  return extradata_size_;
}
inline void VideoCodec::set_extradata_size(::google::protobuf::int32 value) {
  
  extradata_size_ = value;
  // @@protoc_insertion_point(field_set:itvsl.protocol.v1beta1.VideoCodec.extradata_size)
}

// string long_name = 7;
inline void VideoCodec::clear_long_name() {
  long_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoCodec::long_name() const {
  // @@protoc_insertion_point(field_get:itvsl.protocol.v1beta1.VideoCodec.long_name)
  return long_name_.GetNoArena();
}
inline void VideoCodec::set_long_name(const ::std::string& value) {
  
  long_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:itvsl.protocol.v1beta1.VideoCodec.long_name)
}
#if LANG_CXX11
inline void VideoCodec::set_long_name(::std::string&& value) {
  
  long_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:itvsl.protocol.v1beta1.VideoCodec.long_name)
}
#endif
inline void VideoCodec::set_long_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  long_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:itvsl.protocol.v1beta1.VideoCodec.long_name)
}
inline void VideoCodec::set_long_name(const char* value, size_t size) {
  
  long_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:itvsl.protocol.v1beta1.VideoCodec.long_name)
}
inline ::std::string* VideoCodec::mutable_long_name() {
  
  // @@protoc_insertion_point(field_mutable:itvsl.protocol.v1beta1.VideoCodec.long_name)
  return long_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoCodec::release_long_name() {
  // @@protoc_insertion_point(field_release:itvsl.protocol.v1beta1.VideoCodec.long_name)
  
  return long_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoCodec::set_allocated_long_name(::std::string* long_name) {
  if (long_name != NULL) {
    
  } else {
    
  }
  long_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), long_name);
  // @@protoc_insertion_point(field_set_allocated:itvsl.protocol.v1beta1.VideoCodec.long_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1beta1
}  // namespace protocol
}  // namespace itvsl

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_itvslprotocol_2eproto
