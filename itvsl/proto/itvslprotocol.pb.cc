// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: itvslprotocol.proto

#include "itvslprotocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_itvslprotocol_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_itvslprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ShapeProto_Dim;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_itvslprotocol_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ShapeProto;
}  // namespace protobuf_itvslprotocol_2eproto
namespace itvsl {
namespace protocol {
namespace v1beta1 {
class CPacketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPacket>
      _instance;
} _CPacket_default_instance_;
class ShapeProto_DimDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ShapeProto_Dim>
      _instance;
} _ShapeProto_Dim_default_instance_;
class ShapeProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ShapeProto>
      _instance;
} _ShapeProto_default_instance_;
class VideoFrameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VideoFrame>
      _instance;
} _VideoFrame_default_instance_;
class VideoCodecDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VideoCodec>
      _instance;
} _VideoCodec_default_instance_;
}  // namespace v1beta1
}  // namespace protocol
}  // namespace itvsl
namespace protobuf_itvslprotocol_2eproto {
static void InitDefaultsCPacket() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::itvsl::protocol::v1beta1::_CPacket_default_instance_;
    new (ptr) ::itvsl::protocol::v1beta1::CPacket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::itvsl::protocol::v1beta1::CPacket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPacket =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPacket}, {}};

static void InitDefaultsShapeProto_Dim() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::itvsl::protocol::v1beta1::_ShapeProto_Dim_default_instance_;
    new (ptr) ::itvsl::protocol::v1beta1::ShapeProto_Dim();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::itvsl::protocol::v1beta1::ShapeProto_Dim::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ShapeProto_Dim =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsShapeProto_Dim}, {}};

static void InitDefaultsShapeProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::itvsl::protocol::v1beta1::_ShapeProto_default_instance_;
    new (ptr) ::itvsl::protocol::v1beta1::ShapeProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::itvsl::protocol::v1beta1::ShapeProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ShapeProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsShapeProto}, {
      &protobuf_itvslprotocol_2eproto::scc_info_ShapeProto_Dim.base,}};

static void InitDefaultsVideoFrame() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::itvsl::protocol::v1beta1::_VideoFrame_default_instance_;
    new (ptr) ::itvsl::protocol::v1beta1::VideoFrame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::itvsl::protocol::v1beta1::VideoFrame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_VideoFrame =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsVideoFrame}, {
      &protobuf_itvslprotocol_2eproto::scc_info_ShapeProto.base,}};

static void InitDefaultsVideoCodec() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::itvsl::protocol::v1beta1::_VideoCodec_default_instance_;
    new (ptr) ::itvsl::protocol::v1beta1::VideoCodec();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::itvsl::protocol::v1beta1::VideoCodec::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VideoCodec =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVideoCodec}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CPacket.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ShapeProto_Dim.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ShapeProto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VideoFrame.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VideoCodec.base);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::CPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::CPacket, pts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::CPacket, dts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::CPacket, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::CPacket, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::CPacket, stream_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::CPacket, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::CPacket, side_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::CPacket, side_data_elems_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::CPacket, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::CPacket, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::CPacket, meta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::CPacket, raw_bgr24_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::ShapeProto_Dim, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::ShapeProto_Dim, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::ShapeProto_Dim, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::ShapeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::ShapeProto, dim_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::VideoFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::VideoFrame, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::VideoFrame, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::VideoFrame, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::VideoFrame, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::VideoFrame, is_keyframe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::VideoFrame, pts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::VideoFrame, dts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::VideoFrame, frame_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::VideoFrame, is_corrupt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::VideoFrame, time_base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::VideoFrame, shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::VideoFrame, device_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::VideoFrame, packet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::VideoFrame, keyframe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::VideoFrame, extradata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::VideoFrame, codec_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::VideoFrame, pix_fmt_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::VideoCodec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::VideoCodec, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::VideoCodec, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::VideoCodec, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::VideoCodec, pix_fmt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::VideoCodec, extradata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::VideoCodec, extradata_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itvsl::protocol::v1beta1::VideoCodec, long_name_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::itvsl::protocol::v1beta1::CPacket)},
  { 17, -1, sizeof(::itvsl::protocol::v1beta1::ShapeProto_Dim)},
  { 24, -1, sizeof(::itvsl::protocol::v1beta1::ShapeProto)},
  { 30, -1, sizeof(::itvsl::protocol::v1beta1::VideoFrame)},
  { 52, -1, sizeof(::itvsl::protocol::v1beta1::VideoCodec)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::itvsl::protocol::v1beta1::_CPacket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::itvsl::protocol::v1beta1::_ShapeProto_Dim_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::itvsl::protocol::v1beta1::_ShapeProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::itvsl::protocol::v1beta1::_VideoFrame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::itvsl::protocol::v1beta1::_VideoCodec_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "itvslprotocol.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023itvslprotocol.proto\022\026itvsl.protocol.v1"
      "beta1\"\315\001\n\007CPacket\022\013\n\003pts\030\001 \001(\003\022\013\n\003dts\030\002 "
      "\001(\003\022\014\n\004data\030\003 \001(\014\022\014\n\004size\030\004 \001(\005\022\021\n\tstrea"
      "m_id\030\005 \001(\005\022\r\n\005flags\030\006 \001(\005\022\021\n\tside_data\030\007"
      " \001(\014\022\027\n\017side_data_elems\030\010 \001(\005\022\020\n\010duratio"
      "n\030\t \001(\003\022\013\n\003pos\030\n \001(\003\022\014\n\004meta\030\013 \001(\t\022\021\n\tra"
      "w_bgr24\030\014 \001(\014\"d\n\nShapeProto\0223\n\003dim\030\002 \003(\013"
      "2&.itvsl.protocol.v1beta1.ShapeProto.Dim"
      "\032!\n\003Dim\022\014\n\004size\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\"\326\002\n\n"
      "VideoFrame\022\r\n\005width\030\001 \001(\003\022\016\n\006height\030\002 \001("
      "\003\022\014\n\004data\030\003 \001(\014\022\021\n\ttimestamp\030\004 \001(\003\022\023\n\013is"
      "_keyframe\030\005 \001(\010\022\013\n\003pts\030\006 \001(\003\022\013\n\003dts\030\007 \001("
      "\003\022\022\n\nframe_type\030\010 \001(\t\022\022\n\nis_corrupt\030\t \001("
      "\010\022\021\n\ttime_base\030\n \001(\001\0221\n\005shape\030\013 \001(\0132\".it"
      "vsl.protocol.v1beta1.ShapeProto\022\021\n\tdevic"
      "e_id\030\014 \001(\t\022\016\n\006packet\030\r \001(\003\022\020\n\010keyframe\030\016"
      " \001(\003\022\021\n\textradata\030\017 \001(\014\022\022\n\ncodec_name\030\020 "
      "\001(\t\022\017\n\007pix_fmt\030\021 \001(\t\"\210\001\n\nVideoCodec\022\014\n\004n"
      "ame\030\001 \001(\t\022\r\n\005width\030\002 \001(\005\022\016\n\006height\030\003 \001(\005"
      "\022\017\n\007pix_fmt\030\004 \001(\t\022\021\n\textradata\030\005 \001(\014\022\026\n\016"
      "extradata_size\030\006 \001(\005\022\021\n\tlong_name\030\007 \001(\tb"
      "\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 847);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "itvslprotocol.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_itvslprotocol_2eproto
namespace itvsl {
namespace protocol {
namespace v1beta1 {

// ===================================================================

void CPacket::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPacket::kPtsFieldNumber;
const int CPacket::kDtsFieldNumber;
const int CPacket::kDataFieldNumber;
const int CPacket::kSizeFieldNumber;
const int CPacket::kStreamIdFieldNumber;
const int CPacket::kFlagsFieldNumber;
const int CPacket::kSideDataFieldNumber;
const int CPacket::kSideDataElemsFieldNumber;
const int CPacket::kDurationFieldNumber;
const int CPacket::kPosFieldNumber;
const int CPacket::kMetaFieldNumber;
const int CPacket::kRawBgr24FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPacket::CPacket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_itvslprotocol_2eproto::scc_info_CPacket.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:itvsl.protocol.v1beta1.CPacket)
}
CPacket::CPacket(const CPacket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  side_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.side_data().size() > 0) {
    side_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.side_data_);
  }
  meta_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.meta().size() > 0) {
    meta_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.meta_);
  }
  raw_bgr24_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.raw_bgr24().size() > 0) {
    raw_bgr24_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_bgr24_);
  }
  ::memcpy(&pts_, &from.pts_,
    static_cast<size_t>(reinterpret_cast<char*>(&pos_) -
    reinterpret_cast<char*>(&pts_)) + sizeof(pos_));
  // @@protoc_insertion_point(copy_constructor:itvsl.protocol.v1beta1.CPacket)
}

void CPacket::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  side_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  meta_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_bgr24_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_) -
      reinterpret_cast<char*>(&pts_)) + sizeof(pos_));
}

CPacket::~CPacket() {
  // @@protoc_insertion_point(destructor:itvsl.protocol.v1beta1.CPacket)
  SharedDtor();
}

void CPacket::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  side_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  meta_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_bgr24_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CPacket::descriptor() {
  ::protobuf_itvslprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_itvslprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPacket& CPacket::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_itvslprotocol_2eproto::scc_info_CPacket.base);
  return *internal_default_instance();
}


void CPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:itvsl.protocol.v1beta1.CPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  side_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  meta_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_bgr24_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_) -
      reinterpret_cast<char*>(&pts_)) + sizeof(pos_));
  _internal_metadata_.Clear();
}

bool CPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:itvsl.protocol.v1beta1.CPacket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 pts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 dts = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 stream_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stream_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 flags = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes side_data = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_side_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 side_data_elems = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &side_data_elems_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 duration = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 pos = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string meta = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_meta()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->meta().data(), static_cast<int>(this->meta().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "itvsl.protocol.v1beta1.CPacket.meta"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes raw_bgr24 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw_bgr24()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:itvsl.protocol.v1beta1.CPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:itvsl.protocol.v1beta1.CPacket)
  return false;
#undef DO_
}

void CPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:itvsl.protocol.v1beta1.CPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 pts = 1;
  if (this->pts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pts(), output);
  }

  // int64 dts = 2;
  if (this->dts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->dts(), output);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // int32 size = 4;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->size(), output);
  }

  // int32 stream_id = 5;
  if (this->stream_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->stream_id(), output);
  }

  // int32 flags = 6;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->flags(), output);
  }

  // bytes side_data = 7;
  if (this->side_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->side_data(), output);
  }

  // int32 side_data_elems = 8;
  if (this->side_data_elems() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->side_data_elems(), output);
  }

  // int64 duration = 9;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->duration(), output);
  }

  // int64 pos = 10;
  if (this->pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->pos(), output);
  }

  // string meta = 11;
  if (this->meta().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->meta().data(), static_cast<int>(this->meta().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "itvsl.protocol.v1beta1.CPacket.meta");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->meta(), output);
  }

  // bytes raw_bgr24 = 12;
  if (this->raw_bgr24().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->raw_bgr24(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:itvsl.protocol.v1beta1.CPacket)
}

::google::protobuf::uint8* CPacket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:itvsl.protocol.v1beta1.CPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 pts = 1;
  if (this->pts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pts(), target);
  }

  // int64 dts = 2;
  if (this->dts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->dts(), target);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // int32 size = 4;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->size(), target);
  }

  // int32 stream_id = 5;
  if (this->stream_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->stream_id(), target);
  }

  // int32 flags = 6;
  if (this->flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->flags(), target);
  }

  // bytes side_data = 7;
  if (this->side_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->side_data(), target);
  }

  // int32 side_data_elems = 8;
  if (this->side_data_elems() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->side_data_elems(), target);
  }

  // int64 duration = 9;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->duration(), target);
  }

  // int64 pos = 10;
  if (this->pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->pos(), target);
  }

  // string meta = 11;
  if (this->meta().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->meta().data(), static_cast<int>(this->meta().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "itvsl.protocol.v1beta1.CPacket.meta");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->meta(), target);
  }

  // bytes raw_bgr24 = 12;
  if (this->raw_bgr24().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->raw_bgr24(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:itvsl.protocol.v1beta1.CPacket)
  return target;
}

size_t CPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:itvsl.protocol.v1beta1.CPacket)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // bytes side_data = 7;
  if (this->side_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->side_data());
  }

  // string meta = 11;
  if (this->meta().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->meta());
  }

  // bytes raw_bgr24 = 12;
  if (this->raw_bgr24().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->raw_bgr24());
  }

  // int64 pts = 1;
  if (this->pts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->pts());
  }

  // int64 dts = 2;
  if (this->dts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->dts());
  }

  // int32 size = 4;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());
  }

  // int32 stream_id = 5;
  if (this->stream_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stream_id());
  }

  // int32 flags = 6;
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flags());
  }

  // int32 side_data_elems = 8;
  if (this->side_data_elems() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->side_data_elems());
  }

  // int64 duration = 9;
  if (this->duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->duration());
  }

  // int64 pos = 10;
  if (this->pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->pos());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPacket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:itvsl.protocol.v1beta1.CPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const CPacket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPacket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:itvsl.protocol.v1beta1.CPacket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:itvsl.protocol.v1beta1.CPacket)
    MergeFrom(*source);
  }
}

void CPacket::MergeFrom(const CPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:itvsl.protocol.v1beta1.CPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.side_data().size() > 0) {

    side_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.side_data_);
  }
  if (from.meta().size() > 0) {

    meta_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.meta_);
  }
  if (from.raw_bgr24().size() > 0) {

    raw_bgr24_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_bgr24_);
  }
  if (from.pts() != 0) {
    set_pts(from.pts());
  }
  if (from.dts() != 0) {
    set_dts(from.dts());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.stream_id() != 0) {
    set_stream_id(from.stream_id());
  }
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
  if (from.side_data_elems() != 0) {
    set_side_data_elems(from.side_data_elems());
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
}

void CPacket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:itvsl.protocol.v1beta1.CPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPacket::CopyFrom(const CPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:itvsl.protocol.v1beta1.CPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPacket::IsInitialized() const {
  return true;
}

void CPacket::Swap(CPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPacket::InternalSwap(CPacket* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  side_data_.Swap(&other->side_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  meta_.Swap(&other->meta_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  raw_bgr24_.Swap(&other->raw_bgr24_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pts_, other->pts_);
  swap(dts_, other->dts_);
  swap(size_, other->size_);
  swap(stream_id_, other->stream_id_);
  swap(flags_, other->flags_);
  swap(side_data_elems_, other->side_data_elems_);
  swap(duration_, other->duration_);
  swap(pos_, other->pos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CPacket::GetMetadata() const {
  protobuf_itvslprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_itvslprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ShapeProto_Dim::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShapeProto_Dim::kSizeFieldNumber;
const int ShapeProto_Dim::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShapeProto_Dim::ShapeProto_Dim()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_itvslprotocol_2eproto::scc_info_ShapeProto_Dim.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:itvsl.protocol.v1beta1.ShapeProto.Dim)
}
ShapeProto_Dim::ShapeProto_Dim(const ShapeProto_Dim& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:itvsl.protocol.v1beta1.ShapeProto.Dim)
}

void ShapeProto_Dim::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = GOOGLE_LONGLONG(0);
}

ShapeProto_Dim::~ShapeProto_Dim() {
  // @@protoc_insertion_point(destructor:itvsl.protocol.v1beta1.ShapeProto.Dim)
  SharedDtor();
}

void ShapeProto_Dim::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ShapeProto_Dim::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ShapeProto_Dim::descriptor() {
  ::protobuf_itvslprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_itvslprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShapeProto_Dim& ShapeProto_Dim::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_itvslprotocol_2eproto::scc_info_ShapeProto_Dim.base);
  return *internal_default_instance();
}


void ShapeProto_Dim::Clear() {
// @@protoc_insertion_point(message_clear_start:itvsl.protocol.v1beta1.ShapeProto.Dim)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool ShapeProto_Dim::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:itvsl.protocol.v1beta1.ShapeProto.Dim)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "itvsl.protocol.v1beta1.ShapeProto.Dim.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:itvsl.protocol.v1beta1.ShapeProto.Dim)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:itvsl.protocol.v1beta1.ShapeProto.Dim)
  return false;
#undef DO_
}

void ShapeProto_Dim::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:itvsl.protocol.v1beta1.ShapeProto.Dim)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 size = 1;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->size(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "itvsl.protocol.v1beta1.ShapeProto.Dim.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:itvsl.protocol.v1beta1.ShapeProto.Dim)
}

::google::protobuf::uint8* ShapeProto_Dim::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:itvsl.protocol.v1beta1.ShapeProto.Dim)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 size = 1;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->size(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "itvsl.protocol.v1beta1.ShapeProto.Dim.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:itvsl.protocol.v1beta1.ShapeProto.Dim)
  return target;
}

size_t ShapeProto_Dim::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:itvsl.protocol.v1beta1.ShapeProto.Dim)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int64 size = 1;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShapeProto_Dim::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:itvsl.protocol.v1beta1.ShapeProto.Dim)
  GOOGLE_DCHECK_NE(&from, this);
  const ShapeProto_Dim* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShapeProto_Dim>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:itvsl.protocol.v1beta1.ShapeProto.Dim)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:itvsl.protocol.v1beta1.ShapeProto.Dim)
    MergeFrom(*source);
  }
}

void ShapeProto_Dim::MergeFrom(const ShapeProto_Dim& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:itvsl.protocol.v1beta1.ShapeProto.Dim)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
}

void ShapeProto_Dim::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:itvsl.protocol.v1beta1.ShapeProto.Dim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShapeProto_Dim::CopyFrom(const ShapeProto_Dim& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:itvsl.protocol.v1beta1.ShapeProto.Dim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeProto_Dim::IsInitialized() const {
  return true;
}

void ShapeProto_Dim::Swap(ShapeProto_Dim* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShapeProto_Dim::InternalSwap(ShapeProto_Dim* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(size_, other->size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ShapeProto_Dim::GetMetadata() const {
  protobuf_itvslprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_itvslprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ShapeProto::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShapeProto::kDimFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShapeProto::ShapeProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_itvslprotocol_2eproto::scc_info_ShapeProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:itvsl.protocol.v1beta1.ShapeProto)
}
ShapeProto::ShapeProto(const ShapeProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      dim_(from.dim_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:itvsl.protocol.v1beta1.ShapeProto)
}

void ShapeProto::SharedCtor() {
}

ShapeProto::~ShapeProto() {
  // @@protoc_insertion_point(destructor:itvsl.protocol.v1beta1.ShapeProto)
  SharedDtor();
}

void ShapeProto::SharedDtor() {
}

void ShapeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ShapeProto::descriptor() {
  ::protobuf_itvslprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_itvslprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShapeProto& ShapeProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_itvslprotocol_2eproto::scc_info_ShapeProto.base);
  return *internal_default_instance();
}


void ShapeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:itvsl.protocol.v1beta1.ShapeProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dim_.Clear();
  _internal_metadata_.Clear();
}

bool ShapeProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:itvsl.protocol.v1beta1.ShapeProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .itvsl.protocol.v1beta1.ShapeProto.Dim dim = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_dim()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:itvsl.protocol.v1beta1.ShapeProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:itvsl.protocol.v1beta1.ShapeProto)
  return false;
#undef DO_
}

void ShapeProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:itvsl.protocol.v1beta1.ShapeProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .itvsl.protocol.v1beta1.ShapeProto.Dim dim = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dim_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->dim(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:itvsl.protocol.v1beta1.ShapeProto)
}

::google::protobuf::uint8* ShapeProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:itvsl.protocol.v1beta1.ShapeProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .itvsl.protocol.v1beta1.ShapeProto.Dim dim = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dim_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->dim(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:itvsl.protocol.v1beta1.ShapeProto)
  return target;
}

size_t ShapeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:itvsl.protocol.v1beta1.ShapeProto)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .itvsl.protocol.v1beta1.ShapeProto.Dim dim = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->dim_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->dim(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShapeProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:itvsl.protocol.v1beta1.ShapeProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ShapeProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShapeProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:itvsl.protocol.v1beta1.ShapeProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:itvsl.protocol.v1beta1.ShapeProto)
    MergeFrom(*source);
  }
}

void ShapeProto::MergeFrom(const ShapeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:itvsl.protocol.v1beta1.ShapeProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dim_.MergeFrom(from.dim_);
}

void ShapeProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:itvsl.protocol.v1beta1.ShapeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShapeProto::CopyFrom(const ShapeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:itvsl.protocol.v1beta1.ShapeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeProto::IsInitialized() const {
  return true;
}

void ShapeProto::Swap(ShapeProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShapeProto::InternalSwap(ShapeProto* other) {
  using std::swap;
  CastToBase(&dim_)->InternalSwap(CastToBase(&other->dim_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ShapeProto::GetMetadata() const {
  protobuf_itvslprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_itvslprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VideoFrame::InitAsDefaultInstance() {
  ::itvsl::protocol::v1beta1::_VideoFrame_default_instance_._instance.get_mutable()->shape_ = const_cast< ::itvsl::protocol::v1beta1::ShapeProto*>(
      ::itvsl::protocol::v1beta1::ShapeProto::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoFrame::kWidthFieldNumber;
const int VideoFrame::kHeightFieldNumber;
const int VideoFrame::kDataFieldNumber;
const int VideoFrame::kTimestampFieldNumber;
const int VideoFrame::kIsKeyframeFieldNumber;
const int VideoFrame::kPtsFieldNumber;
const int VideoFrame::kDtsFieldNumber;
const int VideoFrame::kFrameTypeFieldNumber;
const int VideoFrame::kIsCorruptFieldNumber;
const int VideoFrame::kTimeBaseFieldNumber;
const int VideoFrame::kShapeFieldNumber;
const int VideoFrame::kDeviceIdFieldNumber;
const int VideoFrame::kPacketFieldNumber;
const int VideoFrame::kKeyframeFieldNumber;
const int VideoFrame::kExtradataFieldNumber;
const int VideoFrame::kCodecNameFieldNumber;
const int VideoFrame::kPixFmtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoFrame::VideoFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_itvslprotocol_2eproto::scc_info_VideoFrame.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:itvsl.protocol.v1beta1.VideoFrame)
}
VideoFrame::VideoFrame(const VideoFrame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  frame_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.frame_type().size() > 0) {
    frame_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_type_);
  }
  device_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.device_id().size() > 0) {
    device_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_id_);
  }
  extradata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.extradata().size() > 0) {
    extradata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extradata_);
  }
  codec_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.codec_name().size() > 0) {
    codec_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.codec_name_);
  }
  pix_fmt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pix_fmt().size() > 0) {
    pix_fmt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pix_fmt_);
  }
  if (from.has_shape()) {
    shape_ = new ::itvsl::protocol::v1beta1::ShapeProto(*from.shape_);
  } else {
    shape_ = NULL;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_corrupt_) -
    reinterpret_cast<char*>(&width_)) + sizeof(is_corrupt_));
  // @@protoc_insertion_point(copy_constructor:itvsl.protocol.v1beta1.VideoFrame)
}

void VideoFrame::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frame_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extradata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  codec_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pix_fmt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&shape_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_corrupt_) -
      reinterpret_cast<char*>(&shape_)) + sizeof(is_corrupt_));
}

VideoFrame::~VideoFrame() {
  // @@protoc_insertion_point(destructor:itvsl.protocol.v1beta1.VideoFrame)
  SharedDtor();
}

void VideoFrame::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frame_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extradata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  codec_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pix_fmt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete shape_;
}

void VideoFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VideoFrame::descriptor() {
  ::protobuf_itvslprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_itvslprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VideoFrame& VideoFrame::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_itvslprotocol_2eproto::scc_info_VideoFrame.base);
  return *internal_default_instance();
}


void VideoFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:itvsl.protocol.v1beta1.VideoFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frame_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extradata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  codec_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pix_fmt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) {
    delete shape_;
  }
  shape_ = NULL;
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_corrupt_) -
      reinterpret_cast<char*>(&width_)) + sizeof(is_corrupt_));
  _internal_metadata_.Clear();
}

bool VideoFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:itvsl.protocol.v1beta1.VideoFrame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_keyframe = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_keyframe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 pts = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 dts = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string frame_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frame_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->frame_type().data(), static_cast<int>(this->frame_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "itvsl.protocol.v1beta1.VideoFrame.frame_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_corrupt = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_corrupt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double time_base = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_base_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .itvsl.protocol.v1beta1.ShapeProto shape = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string device_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_id().data(), static_cast<int>(this->device_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "itvsl.protocol.v1beta1.VideoFrame.device_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 packet = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &packet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 keyframe = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &keyframe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes extradata = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_extradata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string codec_name = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_codec_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->codec_name().data(), static_cast<int>(this->codec_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "itvsl.protocol.v1beta1.VideoFrame.codec_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pix_fmt = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pix_fmt()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pix_fmt().data(), static_cast<int>(this->pix_fmt().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "itvsl.protocol.v1beta1.VideoFrame.pix_fmt"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:itvsl.protocol.v1beta1.VideoFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:itvsl.protocol.v1beta1.VideoFrame)
  return false;
#undef DO_
}

void VideoFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:itvsl.protocol.v1beta1.VideoFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 width = 1;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->width(), output);
  }

  // int64 height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->height(), output);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timestamp(), output);
  }

  // bool is_keyframe = 5;
  if (this->is_keyframe() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_keyframe(), output);
  }

  // int64 pts = 6;
  if (this->pts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->pts(), output);
  }

  // int64 dts = 7;
  if (this->dts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->dts(), output);
  }

  // string frame_type = 8;
  if (this->frame_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->frame_type().data(), static_cast<int>(this->frame_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "itvsl.protocol.v1beta1.VideoFrame.frame_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->frame_type(), output);
  }

  // bool is_corrupt = 9;
  if (this->is_corrupt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_corrupt(), output);
  }

  // double time_base = 10;
  if (this->time_base() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->time_base(), output);
  }

  // .itvsl.protocol.v1beta1.ShapeProto shape = 11;
  if (this->has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_shape(), output);
  }

  // string device_id = 12;
  if (this->device_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_id().data(), static_cast<int>(this->device_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "itvsl.protocol.v1beta1.VideoFrame.device_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->device_id(), output);
  }

  // int64 packet = 13;
  if (this->packet() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->packet(), output);
  }

  // int64 keyframe = 14;
  if (this->keyframe() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->keyframe(), output);
  }

  // bytes extradata = 15;
  if (this->extradata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->extradata(), output);
  }

  // string codec_name = 16;
  if (this->codec_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->codec_name().data(), static_cast<int>(this->codec_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "itvsl.protocol.v1beta1.VideoFrame.codec_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->codec_name(), output);
  }

  // string pix_fmt = 17;
  if (this->pix_fmt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pix_fmt().data(), static_cast<int>(this->pix_fmt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "itvsl.protocol.v1beta1.VideoFrame.pix_fmt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->pix_fmt(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:itvsl.protocol.v1beta1.VideoFrame)
}

::google::protobuf::uint8* VideoFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:itvsl.protocol.v1beta1.VideoFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 width = 1;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->width(), target);
  }

  // int64 height = 2;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->height(), target);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timestamp(), target);
  }

  // bool is_keyframe = 5;
  if (this->is_keyframe() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_keyframe(), target);
  }

  // int64 pts = 6;
  if (this->pts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->pts(), target);
  }

  // int64 dts = 7;
  if (this->dts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->dts(), target);
  }

  // string frame_type = 8;
  if (this->frame_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->frame_type().data(), static_cast<int>(this->frame_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "itvsl.protocol.v1beta1.VideoFrame.frame_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->frame_type(), target);
  }

  // bool is_corrupt = 9;
  if (this->is_corrupt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_corrupt(), target);
  }

  // double time_base = 10;
  if (this->time_base() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->time_base(), target);
  }

  // .itvsl.protocol.v1beta1.ShapeProto shape = 11;
  if (this->has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_shape(), deterministic, target);
  }

  // string device_id = 12;
  if (this->device_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_id().data(), static_cast<int>(this->device_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "itvsl.protocol.v1beta1.VideoFrame.device_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->device_id(), target);
  }

  // int64 packet = 13;
  if (this->packet() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->packet(), target);
  }

  // int64 keyframe = 14;
  if (this->keyframe() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->keyframe(), target);
  }

  // bytes extradata = 15;
  if (this->extradata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->extradata(), target);
  }

  // string codec_name = 16;
  if (this->codec_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->codec_name().data(), static_cast<int>(this->codec_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "itvsl.protocol.v1beta1.VideoFrame.codec_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->codec_name(), target);
  }

  // string pix_fmt = 17;
  if (this->pix_fmt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pix_fmt().data(), static_cast<int>(this->pix_fmt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "itvsl.protocol.v1beta1.VideoFrame.pix_fmt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->pix_fmt(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:itvsl.protocol.v1beta1.VideoFrame)
  return target;
}

size_t VideoFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:itvsl.protocol.v1beta1.VideoFrame)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // string frame_type = 8;
  if (this->frame_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->frame_type());
  }

  // string device_id = 12;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_id());
  }

  // bytes extradata = 15;
  if (this->extradata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->extradata());
  }

  // string codec_name = 16;
  if (this->codec_name().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->codec_name());
  }

  // string pix_fmt = 17;
  if (this->pix_fmt().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pix_fmt());
  }

  // .itvsl.protocol.v1beta1.ShapeProto shape = 11;
  if (this->has_shape()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *shape_);
  }

  // int64 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->width());
  }

  // int64 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->height());
  }

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int64 pts = 6;
  if (this->pts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->pts());
  }

  // int64 dts = 7;
  if (this->dts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->dts());
  }

  // double time_base = 10;
  if (this->time_base() != 0) {
    total_size += 1 + 8;
  }

  // int64 packet = 13;
  if (this->packet() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->packet());
  }

  // int64 keyframe = 14;
  if (this->keyframe() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->keyframe());
  }

  // bool is_keyframe = 5;
  if (this->is_keyframe() != 0) {
    total_size += 1 + 1;
  }

  // bool is_corrupt = 9;
  if (this->is_corrupt() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:itvsl.protocol.v1beta1.VideoFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:itvsl.protocol.v1beta1.VideoFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:itvsl.protocol.v1beta1.VideoFrame)
    MergeFrom(*source);
  }
}

void VideoFrame::MergeFrom(const VideoFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:itvsl.protocol.v1beta1.VideoFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.frame_type().size() > 0) {

    frame_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_type_);
  }
  if (from.device_id().size() > 0) {

    device_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_id_);
  }
  if (from.extradata().size() > 0) {

    extradata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extradata_);
  }
  if (from.codec_name().size() > 0) {

    codec_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.codec_name_);
  }
  if (from.pix_fmt().size() > 0) {

    pix_fmt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pix_fmt_);
  }
  if (from.has_shape()) {
    mutable_shape()->::itvsl::protocol::v1beta1::ShapeProto::MergeFrom(from.shape());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.pts() != 0) {
    set_pts(from.pts());
  }
  if (from.dts() != 0) {
    set_dts(from.dts());
  }
  if (from.time_base() != 0) {
    set_time_base(from.time_base());
  }
  if (from.packet() != 0) {
    set_packet(from.packet());
  }
  if (from.keyframe() != 0) {
    set_keyframe(from.keyframe());
  }
  if (from.is_keyframe() != 0) {
    set_is_keyframe(from.is_keyframe());
  }
  if (from.is_corrupt() != 0) {
    set_is_corrupt(from.is_corrupt());
  }
}

void VideoFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:itvsl.protocol.v1beta1.VideoFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoFrame::CopyFrom(const VideoFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:itvsl.protocol.v1beta1.VideoFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoFrame::IsInitialized() const {
  return true;
}

void VideoFrame::Swap(VideoFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoFrame::InternalSwap(VideoFrame* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  frame_type_.Swap(&other->frame_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  device_id_.Swap(&other->device_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  extradata_.Swap(&other->extradata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  codec_name_.Swap(&other->codec_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pix_fmt_.Swap(&other->pix_fmt_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(shape_, other->shape_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(timestamp_, other->timestamp_);
  swap(pts_, other->pts_);
  swap(dts_, other->dts_);
  swap(time_base_, other->time_base_);
  swap(packet_, other->packet_);
  swap(keyframe_, other->keyframe_);
  swap(is_keyframe_, other->is_keyframe_);
  swap(is_corrupt_, other->is_corrupt_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VideoFrame::GetMetadata() const {
  protobuf_itvslprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_itvslprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VideoCodec::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoCodec::kNameFieldNumber;
const int VideoCodec::kWidthFieldNumber;
const int VideoCodec::kHeightFieldNumber;
const int VideoCodec::kPixFmtFieldNumber;
const int VideoCodec::kExtradataFieldNumber;
const int VideoCodec::kExtradataSizeFieldNumber;
const int VideoCodec::kLongNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoCodec::VideoCodec()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_itvslprotocol_2eproto::scc_info_VideoCodec.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:itvsl.protocol.v1beta1.VideoCodec)
}
VideoCodec::VideoCodec(const VideoCodec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  pix_fmt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pix_fmt().size() > 0) {
    pix_fmt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pix_fmt_);
  }
  extradata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.extradata().size() > 0) {
    extradata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extradata_);
  }
  long_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.long_name().size() > 0) {
    long_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.long_name_);
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&extradata_size_) -
    reinterpret_cast<char*>(&width_)) + sizeof(extradata_size_));
  // @@protoc_insertion_point(copy_constructor:itvsl.protocol.v1beta1.VideoCodec)
}

void VideoCodec::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pix_fmt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extradata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  long_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extradata_size_) -
      reinterpret_cast<char*>(&width_)) + sizeof(extradata_size_));
}

VideoCodec::~VideoCodec() {
  // @@protoc_insertion_point(destructor:itvsl.protocol.v1beta1.VideoCodec)
  SharedDtor();
}

void VideoCodec::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pix_fmt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extradata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  long_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VideoCodec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VideoCodec::descriptor() {
  ::protobuf_itvslprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_itvslprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VideoCodec& VideoCodec::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_itvslprotocol_2eproto::scc_info_VideoCodec.base);
  return *internal_default_instance();
}


void VideoCodec::Clear() {
// @@protoc_insertion_point(message_clear_start:itvsl.protocol.v1beta1.VideoCodec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pix_fmt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extradata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  long_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extradata_size_) -
      reinterpret_cast<char*>(&width_)) + sizeof(extradata_size_));
  _internal_metadata_.Clear();
}

bool VideoCodec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:itvsl.protocol.v1beta1.VideoCodec)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "itvsl.protocol.v1beta1.VideoCodec.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pix_fmt = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pix_fmt()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pix_fmt().data(), static_cast<int>(this->pix_fmt().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "itvsl.protocol.v1beta1.VideoCodec.pix_fmt"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes extradata = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_extradata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 extradata_size = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extradata_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string long_name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_long_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->long_name().data(), static_cast<int>(this->long_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "itvsl.protocol.v1beta1.VideoCodec.long_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:itvsl.protocol.v1beta1.VideoCodec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:itvsl.protocol.v1beta1.VideoCodec)
  return false;
#undef DO_
}

void VideoCodec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:itvsl.protocol.v1beta1.VideoCodec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "itvsl.protocol.v1beta1.VideoCodec.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // int32 width = 2;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // int32 height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  // string pix_fmt = 4;
  if (this->pix_fmt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pix_fmt().data(), static_cast<int>(this->pix_fmt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "itvsl.protocol.v1beta1.VideoCodec.pix_fmt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->pix_fmt(), output);
  }

  // bytes extradata = 5;
  if (this->extradata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->extradata(), output);
  }

  // int32 extradata_size = 6;
  if (this->extradata_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->extradata_size(), output);
  }

  // string long_name = 7;
  if (this->long_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->long_name().data(), static_cast<int>(this->long_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "itvsl.protocol.v1beta1.VideoCodec.long_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->long_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:itvsl.protocol.v1beta1.VideoCodec)
}

::google::protobuf::uint8* VideoCodec::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:itvsl.protocol.v1beta1.VideoCodec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "itvsl.protocol.v1beta1.VideoCodec.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // int32 width = 2;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // int32 height = 3;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }

  // string pix_fmt = 4;
  if (this->pix_fmt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pix_fmt().data(), static_cast<int>(this->pix_fmt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "itvsl.protocol.v1beta1.VideoCodec.pix_fmt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pix_fmt(), target);
  }

  // bytes extradata = 5;
  if (this->extradata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->extradata(), target);
  }

  // int32 extradata_size = 6;
  if (this->extradata_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->extradata_size(), target);
  }

  // string long_name = 7;
  if (this->long_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->long_name().data(), static_cast<int>(this->long_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "itvsl.protocol.v1beta1.VideoCodec.long_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->long_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:itvsl.protocol.v1beta1.VideoCodec)
  return target;
}

size_t VideoCodec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:itvsl.protocol.v1beta1.VideoCodec)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string pix_fmt = 4;
  if (this->pix_fmt().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pix_fmt());
  }

  // bytes extradata = 5;
  if (this->extradata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->extradata());
  }

  // string long_name = 7;
  if (this->long_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->long_name());
  }

  // int32 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // int32 extradata_size = 6;
  if (this->extradata_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->extradata_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoCodec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:itvsl.protocol.v1beta1.VideoCodec)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoCodec* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoCodec>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:itvsl.protocol.v1beta1.VideoCodec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:itvsl.protocol.v1beta1.VideoCodec)
    MergeFrom(*source);
  }
}

void VideoCodec::MergeFrom(const VideoCodec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:itvsl.protocol.v1beta1.VideoCodec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.pix_fmt().size() > 0) {

    pix_fmt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pix_fmt_);
  }
  if (from.extradata().size() > 0) {

    extradata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extradata_);
  }
  if (from.long_name().size() > 0) {

    long_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.long_name_);
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.extradata_size() != 0) {
    set_extradata_size(from.extradata_size());
  }
}

void VideoCodec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:itvsl.protocol.v1beta1.VideoCodec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoCodec::CopyFrom(const VideoCodec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:itvsl.protocol.v1beta1.VideoCodec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoCodec::IsInitialized() const {
  return true;
}

void VideoCodec::Swap(VideoCodec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoCodec::InternalSwap(VideoCodec* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pix_fmt_.Swap(&other->pix_fmt_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  extradata_.Swap(&other->extradata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  long_name_.Swap(&other->long_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(extradata_size_, other->extradata_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VideoCodec::GetMetadata() const {
  protobuf_itvslprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_itvslprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace protocol
}  // namespace itvsl
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::itvsl::protocol::v1beta1::CPacket* Arena::CreateMaybeMessage< ::itvsl::protocol::v1beta1::CPacket >(Arena* arena) {
  return Arena::CreateInternal< ::itvsl::protocol::v1beta1::CPacket >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::itvsl::protocol::v1beta1::ShapeProto_Dim* Arena::CreateMaybeMessage< ::itvsl::protocol::v1beta1::ShapeProto_Dim >(Arena* arena) {
  return Arena::CreateInternal< ::itvsl::protocol::v1beta1::ShapeProto_Dim >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::itvsl::protocol::v1beta1::ShapeProto* Arena::CreateMaybeMessage< ::itvsl::protocol::v1beta1::ShapeProto >(Arena* arena) {
  return Arena::CreateInternal< ::itvsl::protocol::v1beta1::ShapeProto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::itvsl::protocol::v1beta1::VideoFrame* Arena::CreateMaybeMessage< ::itvsl::protocol::v1beta1::VideoFrame >(Arena* arena) {
  return Arena::CreateInternal< ::itvsl::protocol::v1beta1::VideoFrame >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::itvsl::protocol::v1beta1::VideoCodec* Arena::CreateMaybeMessage< ::itvsl::protocol::v1beta1::VideoCodec >(Arena* arena) {
  return Arena::CreateInternal< ::itvsl::protocol::v1beta1::VideoCodec >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
